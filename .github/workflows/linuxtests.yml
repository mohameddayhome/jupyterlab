name: Linux Tests

on:
  push:
    branches: [3.3.x]
  pull_request:
    branches: [3.3.x]
  release:
    types: [published]

jobs:
  linuxtests:
    name: Linux
    strategy:
      matrix:
        group:
          [
            integrity,
            integrity2,
            integrity3,
            release_test,
            docs,
            usage,
            usage2,
            splice_source,
            python,
            examples,
            interop,
            nonode,
            linkcheck,
            lint,
          ]
        # This will be used by the base setup action
        python-version: ['3.7', '3.10']
        include:
          - group: release_test
            upload-output: true
        exclude:
          - group: integrity
            python-version: '3.7'
          - group: integrity2
            python-version: '3.7'
          - group: integrity3
            python-version: '3.7'
          - group: release_test
            python-version: '3.7'
          - group: docs
            python-version: '3.7'
          - group: usage
            python-version: '3.7'
          - group: usage2
            python-version: '3.7'
          - group: linkcheck
            python-version: '3.7'
          - group: nonode
            python-version: '3.7'
          - group: lint
            python-version: '3.7'
          - group: examples
            python-version: '3.7'
          - group: splice_source
            python-version: '3.7'
      fail-fast: false
    timeout-minutes: 30
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}

      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Setup firefox
        uses: browser-actions/setup-firefox@latest

      - name: Cache pip on Linux
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python }}-${{ hashFiles('**/requirements.txt', 'setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache yarn
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        env:
          GROUP: ${{ matrix.group }}
        run: |
          bash ./scripts/ci_install.sh

      - name: Run test ${{ matrix.group }}
        env:
          GROUP: ${{ matrix.group }}
          JLAB_BROWSER_TYPE: firefox
        run: |
          bash ./scripts/ci_script.sh

      - name: Upload ${{ matrix.group }} results
        if: ${{ matrix.upload-output && always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.group }} ${{ github.run_number }}
          path: ./build/${{ matrix.group }}_output
